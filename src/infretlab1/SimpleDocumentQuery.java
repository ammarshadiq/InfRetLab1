/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package infretlab1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.List;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.event.RowSorterEvent;
import javax.swing.event.RowSorterListener;
import javax.swing.JFileChooser;

/**
 *
 * @author shadiq
 */
public class SimpleDocumentQuery extends javax.swing.JFrame {

    /**
     * Creates new form SimpleDocumentQuery
     */
    public SimpleDocumentQuery() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        corpusFileBrowseButton = new javax.swing.JButton();
        corpusFileTextField = new javax.swing.JTextField();
        indexFileButton = new javax.swing.JButton();
        MainTabbedPane = new javax.swing.JTabbedPane();
        TokenStatPanel = new javax.swing.JPanel();
        numOfDocStaticLabel = new javax.swing.JLabel();
        numOfTokStaticLabel = new javax.swing.JLabel();
        numOfUniqTokStaticLabel = new javax.swing.JLabel();
        numOfDocsLabel = new javax.swing.JLabel();
        numOfTokensLabel = new javax.swing.JLabel();
        numOfUniqTokensLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tokenStatTable = new javax.swing.JTable();
        booleanQueryPanel = new javax.swing.JPanel();
        booleanQueriesTextField = new javax.swing.JTextField();
        booleanSearchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        booleanQueryResultTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        weightedQueryPanel = new javax.swing.JPanel();
        weightedQueryTextField = new javax.swing.JTextField();
        weightedSearchButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        weightedQueryResultTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        aboutPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        corpusFileBrowseButton.setText("Browse");
        corpusFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corpusFileBrowseButtonActionPerformed(evt);
            }
        });

        corpusFileTextField.setText("movies.txt");

        indexFileButton.setText("Index It!");
        indexFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexFileButtonActionPerformed(evt);
            }
        });

        numOfDocStaticLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numOfDocStaticLabel.setText("Documents (Line)");

        numOfTokStaticLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numOfTokStaticLabel.setText("Tokens");

        numOfUniqTokStaticLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numOfUniqTokStaticLabel.setText("Unique Tokens");

        numOfDocsLabel.setText("0");

        numOfTokensLabel.setText("0");

        numOfUniqTokensLabel.setText("0");

        tokenStatTable.setAutoCreateRowSorter(true);
        tokenStatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Token", "Freq", "Doc Freq"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tokenStatTable.getModel());
        sorter.setSortable(0, false);
        sorter.addRowSorterListener(new RowSorterListener() {
            @Override
            public void sorterChanged(RowSorterEvent evt) {
                int indexOfNoColumn = 0;
                for (int i = 0; i < tokenStatTable.getRowCount(); i++) {
                    tokenStatTable.setValueAt(i + 1, i, indexOfNoColumn);
                }
            }
        });

        //jTable1.setRowSorter(sorter);
        //List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        //
        //int columnIndexToSort = 2;
        //sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));
        //
        //sorter.setSortKeys(sortKeys);
        //sorter.sort();
        jScrollPane1.setViewportView(tokenStatTable);
        if (tokenStatTable.getColumnModel().getColumnCount() > 0) {
            tokenStatTable.getColumnModel().getColumn(0).setPreferredWidth(4);
        }

        javax.swing.GroupLayout TokenStatPanelLayout = new javax.swing.GroupLayout(TokenStatPanel);
        TokenStatPanel.setLayout(TokenStatPanelLayout);
        TokenStatPanelLayout.setHorizontalGroup(
            TokenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TokenStatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TokenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addGroup(TokenStatPanelLayout.createSequentialGroup()
                        .addGroup(TokenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TokenStatPanelLayout.createSequentialGroup()
                                .addComponent(numOfTokensLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numOfTokStaticLabel))
                            .addGroup(TokenStatPanelLayout.createSequentialGroup()
                                .addComponent(numOfUniqTokensLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numOfUniqTokStaticLabel))
                            .addGroup(TokenStatPanelLayout.createSequentialGroup()
                                .addComponent(numOfDocsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numOfDocStaticLabel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        TokenStatPanelLayout.setVerticalGroup(
            TokenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TokenStatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TokenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOfDocsLabel)
                    .addComponent(numOfDocStaticLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TokenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOfTokStaticLabel)
                    .addComponent(numOfTokensLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TokenStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOfUniqTokStaticLabel)
                    .addComponent(numOfUniqTokensLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainTabbedPane.addTab("Tokens Stat", TokenStatPanel);

        booleanQueriesTextField.setText("really kids school");

        booleanSearchButton.setText("Search!");
        booleanSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                booleanSearchButtonActionPerformed(evt);
            }
        });

        booleanQueryResultTable.setDefaultRenderer(String.class, new MultiLineTableCellRenderer());
        booleanQueryResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doc ID", "Content"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        booleanQueryResultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane2.setViewportView(booleanQueryResultTable);
        if (booleanQueryResultTable.getColumnModel().getColumnCount() > 0) {
            booleanQueryResultTable.getColumnModel().getColumn(0).setMinWidth(70);
            booleanQueryResultTable.getColumnModel().getColumn(0).setPreferredWidth(70);
            booleanQueryResultTable.getColumnModel().getColumn(0).setMaxWidth(150);
        }

        jLabel4.setText("Result:");

        jLabel5.setText("0");

        jLabel6.setText("# Comparison:");

        jLabel7.setText("0");

        jCheckBox1.setText("Optimize Comparison");

        javax.swing.GroupLayout booleanQueryPanelLayout = new javax.swing.GroupLayout(booleanQueryPanel);
        booleanQueryPanel.setLayout(booleanQueryPanelLayout);
        booleanQueryPanelLayout.setHorizontalGroup(
            booleanQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booleanQueryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(booleanQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addGroup(booleanQueryPanelLayout.createSequentialGroup()
                        .addComponent(booleanQueriesTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(booleanSearchButton))
                    .addGroup(booleanQueryPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)))
                .addContainerGap())
        );
        booleanQueryPanelLayout.setVerticalGroup(
            booleanQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booleanQueryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(booleanQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(booleanQueriesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(booleanSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(booleanQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainTabbedPane.addTab("Boolean Queries", booleanQueryPanel);

        weightedQueryTextField.setText("really kids school");

        weightedSearchButton.setText("Search!");
        weightedSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightedSearchButtonActionPerformed(evt);
            }
        });

        weightedQueryResultTable.setAutoCreateRowSorter(true);
        weightedQueryResultTable.setDefaultRenderer(String.class, new MultiLineTableCellRenderer());
        weightedQueryResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Doc ID", "Content", "CosSim"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableRowSorter<TableModel> table3Sorter = new TableRowSorter<>(weightedQueryResultTable.getModel());
        table3Sorter.setSortable(0, false);
        table3Sorter.addRowSorterListener(new RowSorterListener() {
            @Override
            public void sorterChanged(RowSorterEvent evt) {
                int indexOfNoColumn = 0;
                for (int i = 0; i < weightedQueryResultTable.getRowCount(); i++) {
                    weightedQueryResultTable.setValueAt(i + 1, i, indexOfNoColumn);
                }
            }
        });

        weightedQueryResultTable.setRowSorter(table3Sorter);
        List<RowSorter.SortKey> table3SortKeys = new ArrayList<>();

        table3SortKeys.add(new RowSorter.SortKey(3, SortOrder.DESCENDING));

        table3Sorter.setSortKeys(table3SortKeys);
        table3Sorter.sort();
        jScrollPane3.setViewportView(weightedQueryResultTable);
        if (weightedQueryResultTable.getColumnModel().getColumnCount() > 0) {
            weightedQueryResultTable.getColumnModel().getColumn(0).setMinWidth(10);
            weightedQueryResultTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            weightedQueryResultTable.getColumnModel().getColumn(0).setMaxWidth(150);
            weightedQueryResultTable.getColumnModel().getColumn(1).setMinWidth(10);
            weightedQueryResultTable.getColumnModel().getColumn(1).setPreferredWidth(50);
            weightedQueryResultTable.getColumnModel().getColumn(1).setMaxWidth(150);
            weightedQueryResultTable.getColumnModel().getColumn(3).setMinWidth(10);
            weightedQueryResultTable.getColumnModel().getColumn(3).setPreferredWidth(70);
            weightedQueryResultTable.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        jLabel8.setText("Result:");

        jLabel9.setText("0");

        jLabel10.setText("# Comparison:");

        jLabel11.setText("0");

        jCheckBox2.setText("Optimize Comparison");

        javax.swing.GroupLayout weightedQueryPanelLayout = new javax.swing.GroupLayout(weightedQueryPanel);
        weightedQueryPanel.setLayout(weightedQueryPanelLayout);
        weightedQueryPanelLayout.setHorizontalGroup(
            weightedQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weightedQueryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(weightedQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addGroup(weightedQueryPanelLayout.createSequentialGroup()
                        .addComponent(weightedQueryTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weightedSearchButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weightedQueryPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox2)))
                .addContainerGap())
        );
        weightedQueryPanelLayout.setVerticalGroup(
            weightedQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weightedQueryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(weightedQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightedQueryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightedSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(weightedQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainTabbedPane.addTab("Weighted Query", weightedQueryPanel);

        jLabel12.setText("Author: Ammar Shadiq, Filip Antomonov");

        jLabel13.setText("Information Retrieval, Uppsala University, April 2016");

        jLabel14.setText("Lab 1: Inverted Index, Boolean Query, Weighted Query");

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addContainerGap(438, Short.MAX_VALUE))
        );

        MainTabbedPane.addTab("About", aboutPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MainTabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(corpusFileBrowseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(corpusFileTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(indexFileButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(corpusFileBrowseButton)
                    .addComponent(corpusFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indexFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MainTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void indexFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexFileButtonActionPerformed
        //readTheFile("/media/shadiq/Dokumen/2016_spring/information_retrieval/class-project/InfRetLab1/movies.txt");
        readTheFile(corpusFileTextField.getText());        
        updateTokenStatDisplay();
    }//GEN-LAST:event_indexFileButtonActionPerformed

    private void booleanSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_booleanSearchButtonActionPerformed
        if(invertedIndex != null){
            Set<Integer> resultSet = booleanSearchDocuments(booleanQueriesTextField.getText(), jCheckBox1.isSelected(), jLabel7);
            updateBooleanQueriesResultTable(resultSet);
        }
    }//GEN-LAST:event_booleanSearchButtonActionPerformed

    private void weightedSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightedSearchButtonActionPerformed
        if(invertedIndex != null){
            Map<Integer, Double> resultMap = weightedSearchDocuments(weightedQueryTextField.getText().toLowerCase(), jCheckBox2.isSelected(), jLabel11);
            updateWeigtedQueriesResultTable(resultMap);
        }
    }//GEN-LAST:event_weightedSearchButtonActionPerformed

    private void corpusFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corpusFileBrowseButtonActionPerformed
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int r = chooser.showOpenDialog(this);
        if (r != javax.swing.JFileChooser.APPROVE_OPTION) {
            return;
        }
        corpusFileTextField.setText(chooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_corpusFileBrowseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleDocumentQuery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleDocumentQuery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleDocumentQuery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleDocumentQuery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimpleDocumentQuery().setVisible(true);
            }
        });
    }
    
    private void readTheFile(String fileString) {
        // Reset!
        invertedIndex = new HashMap<>();
        tokenFreq = new HashMap<>();
        documents = new HashMap<>();
        numOfDoc = 0;
        numOfToken = 0;
        
        try {
            BufferedReader br = new BufferedReader(new FileReader(fileString));
            ArrayList<Document> docs = new ArrayList<>();
            
            int lineCounter = 0;
            int tokenCounter = 0;

            String line = null;
            while ((line = br.readLine()) != null) {
                
                // to lower case and tokenize
                line = line.toLowerCase();
                String[] tokens = line.split(" ");
                
                // for counting & Document ID purpose
                lineCounter ++;
                tokenCounter += tokens.length;
                
                // Document storage for retrieval use
                documents.put(lineCounter, createDocument(line, tokens, lineCounter));
                
                // index the document
                indexDocument(tokens, lineCounter);
            }
            
            /* calculate documents TF-IDF values */
            generateTFIDF();
            
            /* UPDATE STATISTICS */
            numOfDoc = lineCounter;
            numOfToken = tokenCounter;
            
            br.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private static Document createDocument(String docContent, String[] tokens, int docId){
        Document d = new Document();
        d.setDocId(docId);
        d.setDocumentContent(docContent);
        d.setTermFreqMap(tokens);
        return d;
    }

    private void indexDocument(String[] tokens, int docId){
        for(int i = 0; i < tokens.length; i++){
            String token = tokens[i];
            
            Set<Integer> docSet = invertedIndex.containsKey(token) ? invertedIndex.get(token) : new TreeSet<>();
            docSet.add(docId);
            invertedIndex.put(token, docSet);
            
            int tokenCount = tokenFreq.containsKey(token) ? tokenFreq.get(token) : 0;
            tokenFreq.put(token,tokenCount + 1);   
        }
    }

    private void generateTFIDF(){
        // iterate through all the documents on the corpus
        for (Document doc : documents.values()) {
            Map<String, Integer> docTfMap = doc.getTermFrequencyMap();
            double docNorm = 0;
            // iterate through all the terms/tokens in the document
            for (String term : docTfMap.keySet()) {
                double tf = 1d + Math.log(docTfMap.get(term));
                double tfidf = (tf * (Math.log(documents.size() / invertedIndex.get(term).size())));
                
                // put the tf-idf value to the document object
                doc.getTfidfMap().put(term, tfidf);
                
                // also calculate the document normalization value for cosine similarity
                docNorm += Math.pow(tfidf, 2d);
            }
            // document norm  (vector length or L2 norm) || d ||
            doc.setDocNormalizer(Math.sqrt(docNorm)); // == square root (sigma(tfidf^2))
        }
    }
    
    private void updateTokenStatDisplay(){
        /* UPDATE THE STATISTICS NUMBERS*/
        numOfDocsLabel.setText(String.valueOf(numOfDoc));
        numOfTokensLabel.setText(String.valueOf(numOfToken));
        numOfUniqTokensLabel.setText(String.valueOf(invertedIndex.size()));
        
        /* UPDATE THE TOKEN FREQUENCIES TABLE */
        int i = 0;
        
        DefaultTableModel dtm = (DefaultTableModel)tokenStatTable.getModel();
        dtm.getDataVector().removeAllElements();
        
        for(String token : invertedIndex.keySet()){
           dtm.addRow(new Object[] { i+1,token,tokenFreq.get(token), invertedIndex.get(token).size() });
            i++;
        }        
    }
    
    
    private static HashSet<Integer> unionSet(Set s1, Set s2){ // OR
        HashSet<Integer> union = new HashSet<>(s1);
        union.addAll(s2);
        return union;
    }

    private static HashSet<Integer> intersection(Set s1, Set s2){ // AND
        HashSet<Integer> intersection = new HashSet<>(s1);
        intersection.retainAll(s2);
        return intersection;
    }
    
    private static HashSet<Integer> difference(Set s1, Set s2){ // NOT
        HashSet<Integer> difference = new HashSet<>(s1);
        difference.removeAll(s2);
        return difference;
    }

    private static Set<Integer> advanceBooleanSearchDocuments(String query){
        String[] queryTokens = query.split(" ");
        Set s1 = null;
        String prevOperator = "";
        for (String qTok : queryTokens) {
            if (qTok.equals("AND")){
                prevOperator = "AND";
            } else if (qTok.equals("OR")){
                prevOperator = "OR";
            } else if (qTok.equals("NOT")){
                prevOperator = "NOT";
            } else {// just a regular term to search
                if(prevOperator.isEmpty()){
                    s1 = invertedIndex.get(qTok);
                } else {
                    if (prevOperator.equals("AND")){
                        s1 = intersection(s1, invertedIndex.get(qTok));
                    } else if(prevOperator.equals("OR")){
                        s1 = unionSet(s1, invertedIndex.get(qTok));
                    } else if(prevOperator.equals("NOT")){
                        s1 = difference(s1, invertedIndex.get(qTok));
                    }
                }
            }
        }
        return s1;
    }

    
    
    
    private static Set<Integer> booleanSearchDocuments(String query, boolean isOptimize, javax.swing.JLabel numOfComparisonLabel){
        String[] queryTokens;
        if(isOptimize){
            queryTokens = optimizeQueryOrder(query);
        } else {
            queryTokens = query.split(" ");
        }
        
        int numOfComp = 0;
        Set s1 = null;
        boolean firstEntry = true;
        
        for (String qTok : queryTokens) {
            if(firstEntry){
                s1 = invertedIndex.get(qTok);
                firstEntry = false;
            }
            numOfComp += s1.size();
            s1 = intersection(s1, invertedIndex.get(qTok));
        }
        
        numOfComparisonLabel.setText(String.valueOf(numOfComp));
        
        return s1;
    }
    
    private static String[] optimizeQueryOrder(String query){
        String[] queryTokens = query.split(" ");
        Map<String, Integer> unsortedMap = new HashMap<>();
        
        // get each individual query token number of documents result
        for (String qTok : queryTokens) {
            unsortedMap.put(qTok, invertedIndex.get(qTok).size());
        }
        
        // sort it by the number of document result
        Map<String, Integer> sortedMap = sortByComparator(unsortedMap);
        return sortedMap.keySet().toArray(queryTokens);
    }
    
    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap) {

        // Convert Map to List
        List<Map.Entry<String, Integer>> list
                = new LinkedList<Map.Entry<String, Integer>>(unsortMap.entrySet());

        // Sort list with comparator, to compare the Map values
        Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
            public int compare(Map.Entry<String, Integer> o1,
                    Map.Entry<String, Integer> o2) {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        // Convert sorted map back to a Map
        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();
        for (Iterator<Map.Entry<String, Integer>> it = list.iterator(); it.hasNext();) {
            Map.Entry<String, Integer> entry = it.next();
            sortedMap.put(entry.getKey(), entry.getValue());
        }
        return sortedMap;
    }
    
    private void updateBooleanQueriesResultTable(Set<Integer> resultSet){
        DefaultTableModel dtm = (DefaultTableModel)booleanQueryResultTable.getModel();
        dtm.getDataVector().removeAllElements();
        
        resultSet.stream().forEach((docID) -> {
            dtm.addRow(new Object[] {docID, documents.get(docID).getDocContent()});
        });
        
        jLabel5.setText(String.valueOf(resultSet.size()));
    }

    private static Map<Integer, Double> weightedSearchDocuments(String query, boolean isOptimize, javax.swing.JLabel numOfComparisonLabel){
        
        String[] queryTokens;
        if(isOptimize){
            queryTokens = optimizeQueryOrder(query);
        } else {
            queryTokens = query.split(" ");
        }
        
        int numOfComp = 0;
        Set s1 = null;
        boolean firstEntry = true;
        
        for (String qTok : queryTokens) {
            if(firstEntry){
                s1 = invertedIndex.get(qTok);
                firstEntry = false;
            }
            numOfComp += s1.size();
            s1 = intersection(s1, invertedIndex.get(qTok));
        }
        
        numOfComparisonLabel.setText(String.valueOf(numOfComp));
        
        // calculate TF-IDF value of the query strings
        QueryDoc qd = calcQueryTfIdf(query);
        
        // calculate the cosine similarity between query and documents
        Map<Integer, Double> weightedDocumentQueryResult = new HashMap<>();
        for (Iterator it = s1.iterator(); it.hasNext();) {
            int docId = (int) it.next();
            weightedDocumentQueryResult.put(docId, calcCosineSim(qd, documents.get(docId)));
        }
        
        return weightedDocumentQueryResult;
    }
    
    private static QueryDoc calcQueryTfIdf(String query){
        // calculate the tf-idf value of the query
        // tokenize:
        String[] queryTokens = query.split(" ");
        Map<String, Integer> queryTFMap = new HashMap<>();
        
        for (String queryToken : queryTokens) {
            int tokenCount = queryTFMap.containsKey(queryToken) ? queryTFMap.get(queryToken) : 0;
            queryTFMap.put(queryToken,tokenCount + 1);   
        }
        
        // calculate the tf-idf
        double queryNorm = 0;
        Map<String, Double> queryTfidfMap = new HashMap<>();
        
        for (String queryToken : queryTFMap.keySet()) {
            double tf = 1d + Math.log(queryTFMap.get(queryToken));
            double tfidf = (tf * (Math.log(documents.size()+1 / invertedIndex.get(queryToken).size()+1)));

            // put the tf-idf value to the document object
            queryTfidfMap.put(queryToken, tfidf);

            // also calculate the document normalization value for cosine similarity
            queryNorm += Math.pow(tfidf, 2d);
        }
        // document norm  (vector length or L2 norm) || d ||
        queryNorm = Math.sqrt(queryNorm); // == square root (sigma(tfidf^2))
        
        return new QueryDoc(queryNorm, queryTfidfMap);
    }
    
    private static double calcCosineSim(QueryDoc queryDoc, Document doc){
        // assumption: the number of tokens in a query would be far more less than
        // the number of tokens in a document
        double similiarity = 0d;
        
        for(String queryToken : queryDoc.queryTfidfMap.keySet()){
            double doc1TfIdfWeight = (queryDoc.queryTfidfMap.get(queryToken));
            
            if(doc.getTfidfMap().get(queryToken) != null){
                double doc2TfIdfWeight = doc.getTfidfMap().get(queryToken);
                similiarity += ((doc1TfIdfWeight/queryDoc.queryNormalization)*
                        (doc2TfIdfWeight/doc.getDocNormalizer()));
            }
        }
        
        return (similiarity);
    }
    
    private void updateWeigtedQueriesResultTable(Map<Integer, Double> resultMap){
        DefaultTableModel dtm = (DefaultTableModel)weightedQueryResultTable.getModel();
        dtm.getDataVector().removeAllElements();
        
        int i = 0;
        for (Integer docID : resultMap.keySet()) {
            dtm.addRow(new Object[] {i+1,docID, documents.get(docID).getDocContent(), resultMap.get(docID)});
            i++;
        }
        
        jLabel9.setText(String.valueOf(resultMap.size()));
    }
    
    
    
    private static Map<String, Set<Integer>> invertedIndex = null;
    private static Map<String, Integer> tokenFreq = null;
    private static Map<Integer, Document> documents = null;
    private static int numOfDoc = 0;
    private static int numOfToken = 0;
    
    private static class QueryDoc{
        double queryNormalization = 0;
        Map<String, Double> queryTfidfMap;
        
        QueryDoc(double queryNormalization, Map<String, Double> queryTfidfMap){
            this.queryNormalization = queryNormalization;
            this.queryTfidfMap = queryTfidfMap;
        }
    }
    
    private JFileChooser chooser = new JFileChooser();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JPanel TokenStatPanel;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JTextField booleanQueriesTextField;
    private javax.swing.JPanel booleanQueryPanel;
    private javax.swing.JTable booleanQueryResultTable;
    private javax.swing.JButton booleanSearchButton;
    private javax.swing.JButton corpusFileBrowseButton;
    private javax.swing.JTextField corpusFileTextField;
    private javax.swing.JButton indexFileButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel numOfDocStaticLabel;
    private javax.swing.JLabel numOfDocsLabel;
    private javax.swing.JLabel numOfTokStaticLabel;
    private javax.swing.JLabel numOfTokensLabel;
    private javax.swing.JLabel numOfUniqTokStaticLabel;
    private javax.swing.JLabel numOfUniqTokensLabel;
    private javax.swing.JTable tokenStatTable;
    private javax.swing.JPanel weightedQueryPanel;
    private javax.swing.JTable weightedQueryResultTable;
    private javax.swing.JTextField weightedQueryTextField;
    private javax.swing.JButton weightedSearchButton;
    // End of variables declaration//GEN-END:variables
}
